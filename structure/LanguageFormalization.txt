Formalization of Language:

Reserved words:
"if" - if statement
"while" - while statement
"return" - return statement 
"switch" - switch statement
"case" - case for switch
"break" - break statement
"include" - include directory
"select" - select keyword
"setState" - state set keyword
"endState" - state end keyword
"int" - integer declaration keyword
"String" - string declaration keyword
"float" - float declaration keyword
"double" - double declaration keyword
"char" - char declaration keyword
"long" - long declaration keyword
"var" - var declaration keyword

Parser Tokens:
"("
")"
"["
"]"
"{"
"}"
","
";"
":"
"+" 
"-"
"&"
"*"
"=" 
"+="
"-="
"!"
"&&"
"||"
"++"
"--"
"!="
"=="
">>" shift right
"<<" shift left

Speical Tokens:
IDENTIFIER - all function/variable names
INTEGER_LITERAL - Digits expressly stated in code.
STRING_LITERAL -  Expressions that are "" (pointer values)
END_OF_FILE - Distinguishes where the code ends.


What is a function?

Function = Identifer -> Identifier/: -> ,/Identifier -> (possible repeat) -> statement


Statement definitions:
Statements are non-terminal, need information to determine what they contain.

Multiple different paths: 
1. Compound Statement: "{" -> statements -> "}"
2. if statement : "if" -> "(" -> expression -> ")" -> statement
3. while statement: "while" -> "(" -> expression -> ")" -> statement
4. switch statement: "switch" -> "(" -> expression -> ")" -> Compound statement with case/break pairs
5. return statement: "return" -> expression -> ";"
6. variable definition: "tvar"/"gvar"/"var"-> identifier -> ","/"="->expression -> ";"
7. expression statement: expression -> ";"
8. no-operation statement: ";"
