Formalization of Language:

How it will work:
Syntnax/function will be shared between the following languages:
- C
	- C-style programming language, but with garbage collection
- Java
	- java-style for imports
- Matlab
	- arrays set up like matlab
- Typescript
	- everything else, typescript. Module import design etc. 

Reserved words:
"if" - if statement
"while" - while statement
"return" - return statement 
"switch" - switch statement
"case" - case for switch
"break" - break statement
"tvar" - temporary variable (within context)
"var" - shared within file
"gvar" - global variable (shared across files)
"char" - character

Parser Tokens:
"("
")"
"["
"]"
"{"
"}"
","
";"
":"
"+" 
"-"
"&"
"*"
"=" 
"+="
"-="
"!"
"&&"
"||"
"++"
"--"
"!="
"=="
">>" shift right
"<<" shift left

Speical Tokens:
IDENTIFIER - all function/variable names
INTEGER LITERAL - Digits expressly stated in code.
STRING LITERAL -  Expressions that are "" (pointer values)
END OF FILE - Distinguishes where the code ends.


What is a function?

Function = Identifer -> Identifier/: -> ,/Identifier -> (possible repeat) -> statement


Statement definitions:
Statements are non-terminal, need information to determine what they contain.

Multiple different paths: 
1. Compound Statement: "{" -> statements -> "}"
2. if statement : "if" -> "(" -> expression -> ")" -> statement
3. while statement: "while" -> "(" -> expression -> ")" -> statement
4. switch statement: "switch" -> "(" -> expression -> ")" -> Compound statement with case/break pairs
5. return statement: "return" -> expression -> ";"
6. variable definition: "tvar"/"gvar"/"var"-> identifier -> ","/"="->expression -> ";"
7. expression statement: expression -> ";"
8. no-operation statement: ";"
